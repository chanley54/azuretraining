{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "chanleydf"
		},
		"EventTrigger_properties_Trigger_parameters_SourceFile": {
			"type": "string",
			"defaultValue": "@triggerBody().filename"
		},
		"EventTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a192e78c-6b15-4954-b587-3cce7c28eb26/resourceGroups/chanley_rg/providers/Microsoft.Storage/storageAccounts/chanleysg"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Loop_param')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nselect \nItemName + 'xxx' as Item from\n[dbo].[srcTableA]\nwhere cost > @{pipeline().parameters.cost}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadUncommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "srcTableA",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_B]",
										"storedProcedureParameters": {
											"item": {
												"value": {
													"value": "@{item().Item}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "chanleysvc",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"cost": {
						"type": "int",
						"defaultValue": 20
					}
				},
				"folder": {
					"name": "chanley"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"description": "   ",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcTrigger",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@pipeline().parameters.SourceFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtTrigger",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"SourceFile": {
						"type": "string",
						"defaultValue": "@trigger().outputs.body.fileName"
					}
				},
				"folder": {
					"name": "chanley"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"type": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"type": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "[['type']"
										},
										"sink": {
											"type": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['name']"
										},
										"sink": {
											"type": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['type']"
										},
										"sink": {
											"type": "String",
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['dependsOn']"
										},
										"sink": {
											"type": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['policy']['timeout']"
										},
										"sink": {
											"type": "String",
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['policy']['retry']"
										},
										"sink": {
											"type": "String",
											"ordinal": 8
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['policy']['retryIntervalInSeconds']"
										},
										"sink": {
											"type": "String",
											"ordinal": 9
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['policy']['secureOutput']"
										},
										"sink": {
											"type": "String",
											"ordinal": 10
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['policy']['secureInput']"
										},
										"sink": {
											"type": "String",
											"ordinal": 11
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['userProperties']"
										},
										"sink": {
											"type": "String",
											"ordinal": 12
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['typeProperties']['dataflow']['referenceName']"
										},
										"sink": {
											"type": "String",
											"ordinal": 13
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['typeProperties']['dataflow']['type']"
										},
										"sink": {
											"type": "String",
											"ordinal": 14
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['typeProperties']['dataflow']['parameters']"
										},
										"sink": {
											"type": "String",
											"ordinal": 15
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['typeProperties']['dataflow']['datasetParameters']['srcTableA']"
										},
										"sink": {
											"type": "String",
											"ordinal": 16
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['typeProperties']['dataflow']['datasetParameters']['tgtTableB']"
										},
										"sink": {
											"type": "String",
											"ordinal": 17
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['typeProperties']['staging']"
										},
										"sink": {
											"type": "String",
											"ordinal": 18
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['typeProperties']['integrationRuntime']['referenceName']"
										},
										"sink": {
											"type": "String",
											"ordinal": 19
										}
									},
									{
										"source": {
											"path": "[['properties']['activities'][0]['typeProperties']['integrationRuntime']['type']"
										},
										"sink": {
											"type": "String",
											"ordinal": 20
										}
									},
									{
										"source": {
											"path": "[['properties']['folder']['name']"
										},
										"sink": {
											"type": "String",
											"ordinal": 21
										}
									},
									{
										"source": {
											"path": "[['properties']['annotations']"
										},
										"sink": {
											"type": "String",
											"ordinal": 22
										}
									},
									{
										"source": {
											"path": "[['properties']['lastPublishTime']"
										},
										"sink": {
											"type": "String",
											"ordinal": 23
										}
									},
									{
										"source": {
											"path": "[['etag']"
										},
										"sink": {
											"type": "String",
											"ordinal": 24
										}
									}
								],
								"collectionReference": "$['value']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "jsonpipeline",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "chanley"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parent_param')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "child_param",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"item": {
									"value": "@pipeline().parameters.item2",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"item2": {
						"type": "string",
						"defaultValue": "Chris"
					}
				},
				"folder": {
					"name": "chanley"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SKU')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  \n[ItemName],\n[ItemSkew],\n12 as cost\nfrom [dbo].[srcTableA]\nwhere ItemName = 'Comic2'",
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadUncommitted",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ItemName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ItemName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ItemSkew",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ItemSkew",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "cost",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "cost",
											"type": "Decimal",
											"physicalType": "money"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcSKU",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtSKU",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "chanley"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfUpsert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcTableA",
								"type": "DatasetReference"
							},
							"name": "srcTableA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgtTableB",
								"type": "DatasetReference"
							},
							"name": "tgtTableB"
						}
					],
					"transformations": [
						{
							"name": "upsert"
						}
					],
					"script": "source(output(\n\t\tItemName as string,\n\t\tItemSkew as string,\n\t\tDatePurchase as timestamp,\n\t\tDateReturned as timestamp,\n\t\tcost as decimal(19,4)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select\\nItemName, ItemSkew, DatePurchase, DateReturned, cost\\nfrom\\n [dbo].[srcTableA]',\n\tformat: 'query') ~> srcTableA\nsrcTableA alterRow(upsertIf(true())) ~> upsert\nupsert sink(input(\n\t\tID as integer,\n\t\tItemName as string,\n\t\tItemSkew as string,\n\t\tDatePurchase as timestamp,\n\t\tDateReturned as timestamp,\n\t\tcost as decimal(19,4),\n\t\tDateLoaded as timestamp,\n\t\tDateUpdated as timestamp,\n\t\tDateDeleted as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['ItemSkew'],\n\tformat: 'table',\n\tmapColumn(\n\t\tItemName,\n\t\tItemSkew,\n\t\tDatePurchase,\n\t\tDateReturned,\n\t\tcost\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tgtTableB"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parent_loop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_loop",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Loop_param",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"cost": {
									"value": "@pipeline().parameters.cost",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"cost": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "chanley"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Loop_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/upsert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfUpsert",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfUpsert",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcTableA": {},
									"tgtTableB": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR30Minutes",
								"type": "IntegrationRuntimeReference"
							}
						}
					}
				],
				"folder": {
					"name": "chanley"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfUpsert')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Trigger",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceFile": "[parameters('EventTrigger_properties_Trigger_parameters_SourceFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/chanleyblob/blobs/Trigger/",
					"blobPathEndsWith": ".parquet",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('EventTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Trigger')]"
			]
		}
	]
}